using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Odbc;
using System.Diagnostics;
using System.Web;
using PdfSharp.Pdf;
using MigraDoc;
using MigraDoc.DocumentObjectModel;
using MigraDoc.DocumentObjectModel.Shapes;
using MigraDoc.DocumentObjectModel.Tables;
using MigraDoc.Rendering;

namespace Frank_SO_Demand_Report_Backup
{
    public class Report2
    {
        enum Status
        {
            Red,
            Yellow,
            Green,
            Error
        }

        #region Data
        OdbcConnection connection = new OdbcConnection("DSN=Navision Frank-Backup");
        OdbcDataAdapter adapter;
        //DataSet ds = new DataSet();

        //Die folgenden Tabellen enthalten ALLE Navision-Datensätze der entsprechenden Tabelle
        DataTable Item = new DataTable("Item");
        DataTable ProdBOMHeader = new DataTable("Production BOM Header");
        DataTable ProdBOMLine = new DataTable("Production BOM Line");
        DataTable SalesLine = new DataTable("Sales Line");
        DataTable SalesHeader = new DataTable("Sales Header");
        DataTable PurchaseLine = new DataTable("Purchase Line");
        DataTable ProdOrderLine = new DataTable("Prod. Order Line");
        DataTable RequisitionLine = new DataTable("Requisition Line");
        DataTable ProdOrderComponent = new DataTable("Prod. Order Component");
        DataTable ItemUnitOfMeasure = new DataTable("Item Unit of Measure");

        DataTable Calculated_Item = new DataTable();
        DataTable Calculated_Sale = new DataTable();
        DataTable Parent_Child_Item = new DataTable();

        public DataTable CalculatedItem
        {
            get { return Calculated_Item; }
        }
        public DataTable CalculatedSale
        {
            get { return Calculated_Sale; }
        }

        string strSQL;

        Document document;
        Table table;
        #endregion
        static string FileLocation = System.AppDomain.CurrentDomain.BaseDirectory;

        //Fertig - Unterschiedlich
        public void Start()
        {
            Console.WriteLine("Welcome to the SO Demand Report Generator. Just relax and wait until this program is done.\n");
            getSalesData();
            setupCalculatedItem();

            getPurchaseData();
            getProductionData();

            getItemData(SalesLine.Columns["No."]);
            setParentChildStatus();
            FillCalculatedItem();
            sortCalculatedItem();
            Console.Write("Generating Report: ");
            generateReport();
            Console.WriteLine("Done! You may now close this window and enjoy the report.");
            Console.ReadLine();
        }

        //Fertig - Unterschiedlich
        /// <summary>
        /// 
        /// </summary>
        /// <param name="connection_string"></param>
        /// <param name="generate_report"></param>
        /// <param name="export_data_location">Describes the folder, in which the datatables are saved as xml files. If emtpy, no files will be created</param>
        public void Start(string connection_string, string export_data_location)
        {
            connection = new OdbcConnection(connection_string);
            Console.WriteLine("Welcome to the SO Demand Report Generator. Just relax and wait until this program is done.\n");
            getSalesData();
            setupCalculatedItem();

            getPurchaseData();
            getProductionData();

            getItemData(SalesLine.Columns["No."]);
            setParentChildStatus();
            FillCalculatedItem();
            sortCalculatedItem();

            if (export_data_location.Trim() != "")
            {
                Calculated_Item.TableName = "Calculated_Item";
                Calculated_Sale.TableName = "Calculated_Sale";
                Parent_Child_Item.TableName = "Parent_Child_Item";
                Calculated_Item.WriteXml(export_data_location + @"\calculated_item.xml", XmlWriteMode.WriteSchema);
                Calculated_Sale.WriteXml(export_data_location + @"\calculated_sale.xml", XmlWriteMode.WriteSchema);
                Parent_Child_Item.WriteXml(export_data_location + @"\parent_child_item.xml", XmlWriteMode.WriteSchema);
            }
        }


        //Fertig - Unterschiedlich
        private void rekursiveItemData(DataRow parentRow, double RequiredQuantity, DataRow sales_line, string ParentNo)
        {
            //The following command works for Production BOM Line as well as for Sales Line
            string itemNo = parentRow["No."].ToString();
            double itemInventory = -1;
            double itemRequiredQuantity = 0;
            double itemPurchaseOrder = 0;
            double itemRequisition = 0;
            string itemReplenishmentSystem = "";

            if (itemNo != "")
            {
                DataRow calculated_sale;

                #region calculated_item
                DataRow calculated_item = Calculated_Item.NewRow();
                calculated_item["No."] = itemNo;
                try
                {
                    Calculated_Item.Rows.Add(calculated_item);
                    DataRow item = Item.Rows.Find(calculated_item["No."]);
                    //Einkauf = 0, Fertigungsauftrag = 1
                    calculated_item["Replenishment System"] = item["Replenishment System"].ToString() == "0" ? "Einkauf" : "Fertigungsauftrag";
                    calculated_item["Required Quantity"] = "-" + item["Inventory"];
                    calculated_item["Inventory"] = item["Inventory"];
                    calculated_item["Purchase Order"] = getQuantityInPurchaseOrder(item);
                    calculated_item["Qty. on Requisition"] = getQuantityInRequisition(item);
                }
                catch (ConstraintException)
                {
                    calculated_item = Calculated_Item.Rows.Find(itemNo);
                }
                catch (NullReferenceException)
                {
                    calculated_item = Calculated_Item.Rows.Find(itemNo);
                }
                double.TryParse(calculated_item["Inventory"].ToString(), out itemInventory);
                double.TryParse(calculated_item["Required Quantity"].ToString(), out itemRequiredQuantity);
                double.TryParse(calculated_item["Purchase Order"].ToString(), out itemPurchaseOrder);
                double.TryParse(calculated_item["Qty. on Requisition"].ToString(), out itemRequisition);

                itemReplenishmentSystem = calculated_item["Replenishment System"].ToString();
                #endregion

                #region calculated_sale
                DataRow[] calculated_sales = Calculated_Sale.Select("[No.] = '" + sales_line["Document No."] + "' and [Item No.] = '" + itemNo + "'");
                if (calculated_sales.Length > 0)
                {
                    calculated_sale = calculated_sales[0];
                    calculated_sale["Required Quantity"] = double.Parse(calculated_sale["Required Quantity"].ToString()) + RequiredQuantity;
                }
                else
                {
                    try
                    {
                        DataRow sales_header = SalesHeader.Rows.Find(sales_line["Document No."]);
                        calculated_sale = Calculated_Sale.NewRow();
                        calculated_sale["No."] = sales_line["Document No."];
                        calculated_sale["Item No."] = itemNo;
                        calculated_sale["Liefertermin nach KW"] = sales_line["Liefertermin nach KW"];
                        calculated_sale["Customer"] = string.Concat(new object[] { sales_header["Sell-to Customer No."], " ", sales_header["Sell-to Customer Name"], sales_header["Sell-to Customer Name 2"] });
                        calculated_sale["Line No."] = sales_line["Line No."];
                        calculated_sale["Parent Item No."] = sales_line["No."];
                        calculated_sale["Required Quantity"] = RequiredQuantity.ToString();
                        calculated_sale["Description"] = Item.Rows.Find(sales_line["No."])["Description"].ToString();
                        Calculated_Sale.Rows.Add(calculated_sale);
                    }
                    catch (NullReferenceException) { }
                }
                #endregion

                #region Required Quantity for current item
                try
                {
                    bool lessthanzerobefore = false;
                    if (itemRequiredQuantity <= 0)
                        lessthanzerobefore = true;

                    calculated_item["Required Quantity"] = (itemRequiredQuantity += RequiredQuantity).ToString();

                    if (lessthanzerobefore && itemRequiredQuantity > 0)
                        calculated_item["Required Quantity"] = (itemRequiredQuantity += itemInventory).ToString();
                }
                catch (FormatException)
                {
                    calculated_item["Required Quantity"] = (itemRequiredQuantity = RequiredQuantity).ToString();
                }
                #endregion

                if (ParentNo != null)
                {
                    try
                    {
                        this.Parent_Child_Item.Rows.Add(new object[] { ParentNo, itemNo, RequiredQuantity.ToString() });
                    }
                    catch (ConstraintException)
                    {
                    }
                }

                if ((itemRequiredQuantity > 0) && (itemReplenishmentSystem == "Fertigungsauftrag"))
                {
                    #region string prodBomNumber = Production BOM Number of current Item
                    DataRow[] pbh = ProdBOMHeader.Select("[Item No.] = '" + itemNo + "'");
                    if (pbh.Length == 0)
                        return;
                    string prodBomNumber = pbh[0]["No."].ToString();

                    if (ProdBOMHeader.Rows.Find(prodBomNumber)["Status"].ToString() != "1")
                        return;
                    #endregion

                    DataRow[] ProductionBOMLines = ProdBOMLine.Select("[Production BOM No.] = '" + prodBomNumber + "'");

                    foreach (DataRow dr in ProductionBOMLines)
                    {
                        #region RequiredQuantity for subitem
                        double unit_of_measure = 1;
                        getUnitFactor(dr["No."], dr["Unit of Measure Code"], out unit_of_measure);
                        double prod_bom_line_qty = double.Parse(dr["Quantity"].ToString()) * unit_of_measure;
                        #endregion

                        rekursiveItemData(dr, RequiredQuantity * prod_bom_line_qty, sales_line, itemNo);
                    }
                }
            }
        }

        //Fertig - Neu
        private void setParentChildStatus()
        {
            foreach (DataRow dr in this.Parent_Child_Item.Rows)
            {
                Status status;
                DataRow calculated_item = this.Calculated_Item.Rows.Find(dr["Child No."]);
                double required_quantity = double.Parse(calculated_item["Required Quantity"].ToString());
                double inventory = 0;
                double.TryParse(calculated_item["Inventory"].ToString(), out inventory);
                double parent_child_quantity = double.Parse(dr["Quantity"].ToString());
                
                if (required_quantity <= inventory)
                    status = Status.Green;
                else if (parent_child_quantity <= inventory)
                    status = Status.Yellow;
                else
                    status = Status.Red;

                dr["Status"] = this.getStringFromStatus(status);
            }
        }

        //Fertig - Unterschiedlich
        private void setupCalculatedItem()
        {
            //Calculated_Item is a table that describes the required quantity of each item
            Calculated_Item.Columns.Add("No.");
            Calculated_Item.Columns.Add("Description");
            //Beschaffungsmethode
            Calculated_Item.Columns.Add("Replenishment System");
            //Einheit
            Calculated_Item.Columns.Add("Base Unit of Measure");
            Calculated_Item.Columns.Add("Required Quantity");
            Calculated_Item.Columns.Add("Inventory");
            //Menge in Verkaufsauftrag
            Calculated_Item.Columns.Add("Sales Order");
            //Menge in Einkaufsbestellung
            Calculated_Item.Columns.Add("Purchase Order");
            //Menge in Fertigung
            Calculated_Item.Columns.Add("Prod. Order");
            //Menge in Komponente
            Calculated_Item.Columns.Add("Prod. Component");
            //Menge in Materialanforderung
            Calculated_Item.Columns.Add("Qty. on Requisition");
            //Fertigungsstelle
            Calculated_Item.Columns.Add("Location");
            //Fehlende Menge
            Calculated_Item.Columns.Add("Missing Quantity");
            Calculated_Item.PrimaryKey = new DataColumn[] { Calculated_Item.Columns["No."] };
            
            Calculated_Sale.Columns.Add("No.");
            Calculated_Sale.Columns.Add("Item No.");
            Calculated_Sale.Columns.Add("Liefertermin nach KW");
            Calculated_Sale.Columns.Add("Customer");
            Calculated_Sale.Columns.Add("Line No.");
            Calculated_Sale.Columns.Add("Parent Item No.");
            Calculated_Sale.Columns.Add("Description");
            Calculated_Sale.Columns.Add("Required Quantity");
            
            Parent_Child_Item.Columns.Add("Parent No.");
            Parent_Child_Item.Columns.Add("Child No.");
            Parent_Child_Item.Columns.Add("Quantity");
            Parent_Child_Item.Columns.Add("Status");
            Parent_Child_Item.PrimaryKey = new DataColumn[] { Parent_Child_Item.Columns["Parent No."], Parent_Child_Item.Columns["Child No."] };
        }
    }
}